buildscript {
    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion '3.18.0'
        }
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'nu.studer.jooq' version '8.1'
}



group = 'com.example.SBDSL'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok'
    // https://mvnrepository.com/artifact/com.infobip/infobip-spring-data-jpa-querydsl-boot-starter
    implementation 'com.infobip:infobip-spring-data-jpa-querydsl-boot-starter:8.1.1'

    // Oracle19c
    implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
    implementation "com.oracle.database.jdbc:ojdbc8"
    implementation group: 'com.oracle.ojdbc', name: 'orai18n', version: '19.3.0.0'

    // === QueryDsl 시작 ===

    // == 스프링 부트 3.0 이상 ==
    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //Infobip-querydsl
    // https://mvnrepository.com/artifact/com.infobip/infobip-spring-data-querydsl
    implementation 'com.infobip:infobip-spring-data-querydsl:8.1.1'

    // === QueryDsl 끝 ===

    //JOOQ - GenerationTool Dependency
    // https://mvnrepository.com/artifact/org.jooq/jooq-codegen-maven
    implementation 'org.jooq:jooq-codegen-maven:3.18.0'
    // https://mvnrepository.com/artifact/org.jooq/jooq-meta
    implementation 'org.jooq:jooq-meta:3.18.0'


    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    jooqGenerator 'org.postgresql:postgresql:42.5.1'

}

tasks.named('test') {
    useJUnitPlatform()
}




//JooqApplication.init() 참고
import org.jooq.meta.jaxb.Logging

jooq {
    version = '3.18.0'  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/postgres'
                    user = 'postgres'
                    password = 'postgres'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'nu.studer.sample'
                        directory = 'build/generated/sources/annotationProcessor/java/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}



